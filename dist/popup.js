(()=>{"use strict";var e={136:(e,t)=>{function a(){t.data=new Array(0)}function o(e){for(let t=0;t<e.length;t++)for(let a=0;a<e[t].length;a++)console.log(e[t][a])}Object.defineProperty(t,"__esModule",{value:!0}),t.printData=t.updateData=t.updateHTML=t.addTableRows=t.getData=t.clearData=t.data=void 0,t.data=[],chrome.storage.sync.set({data:t.data}),t.clearData=a,t.getData=function(){console.log("running getData"),chrome.storage.sync.get("data",(function(e){console.log(e)})),chrome.storage.sync.get("data").then((e=>{console.log("result[data]: "+e.data);for(let t=0;t<e.data.length;t++)for(let a=0;a<e.data[t].length;a++)console.log(e.data[t][a])}))},t.addTableRows=function(e,a){let o=a.rows.length;for(let l=0;l<o;l++){let o=a.rows.item(l).cells,s=new Array(0),r=o.length;for(var n=0;n<r-1;n++){let e=o.item(n).getElementsByTagName("input");if(null!=e[0]){const a=e[0];console.log("we are in AddTableRows and "),console.log(`we are adding ${a.value} to data ${t.data}`),s.push(a.value)}}t.data.push(s);let d=e.rows.length,c=e.insertRow(d);console.log("inserting row to "+d);let i=c.insertCell(0),g=c.insertCell(1),u=c.insertCell(2),p=c.insertCell(3);i.innerHTML=`<input type="text" value="${s[0]}">`,console.log("cell1 = "+i.innerHTML),g.innerHTML=`<input type="text" value="${s[1]}">`,console.log("cell2 = "+g.innerHTML),u.innerHTML=`<input type="date" value="${s[2]}">`,console.log("cell3 = "+u.innerHTML),p.innerHTML="<button>Done</button>"}},t.updateHTML=function(e){const a=e.rows.length;for(let l=0;l<a;l++){let a=e.rows.item(l).cells,s=a.length;for(var n=0;n<s-1;n++){let e=a.item(n).getElementsByTagName("input");if(null!=e[0]){const a=e[0];console.log("we are in updateHTML and data is "),o(t.data),console.log(`data[i][j] is ${t.data[l][n]}`),a.value=t.data[l][n]}}}},t.updateData=function(e){a(),console.log("we need to update data");const n=e.rows.length;for(let a=0;a<n;a++){let o=e.rows.item(a).cells,n=new Array(0),s=o.length;for(var l=0;l<s-1;l++){let e=o.item(l).getElementsByTagName("input");if(null!=e[0]){const a=e[0];console.log(`we are adding ${a.value} to data ${t.data}`),n.push(a.value)}}t.data.push(n)}console.log("data after updateData"),o(t.data),chrome.storage.sync.set({data:t.data}),chrome.storage.sync.get(["data"]).then((e=>{console.log(`Value is currently ${e.data}`)}))},t.printData=o,chrome.storage.onChanged.addListener(((e,t)=>{for(let[a,{oldValue:o,newValue:n}]of Object.entries(e))console.log(`Storage key "${a}" in namespace "${t}" changed.`,`Old value was "${o}", new value is "${n}".`)}))}},t={};function a(o){var n=t[o];if(void 0!==n)return n.exports;var l=t[o]={exports:{}};return e[o](l,l.exports,a),l.exports}(()=>{const e=document.querySelector("table");let t=e.rows.length;const o=a(136);(0,o.getData)(),console.log("data btw:"),(0,o.printData)(o.data),0==o.data.length?(console.log("data is empty, so we need to update the data"),(0,o.updateData)(e)):(console.log("data is not empty, so lets instead update our HTML"),(0,o.updateHTML)(e)),function(){for(let n=0;n<t;n++){let t=e.rows.item(n).cells,l=t.length;for(var a=0;a<l-1;a++){let n=t.item(a).getElementsByTagName("input");null!=n[0]&&n[0].addEventListener("change",(t=>{(0,o.updateData)(e)}))}}console.log("data after adding listeners"),(0,o.printData)(o.data)}(),console.log("data is "+o.data);const n=document.querySelector("#addingTable");document.querySelector("#add").addEventListener("click",(t=>{(0,o.addTableRows)(e,n)}))})()})();